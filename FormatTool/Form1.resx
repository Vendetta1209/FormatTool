<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAgEBaA4GC5UPBwy9AwECjgAAABgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBIICY5BHCj5XylG/2MrTf88Gi39CQQGogAA
        AAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQQjBxAwjAgR
        MasBAgZUAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARCQZRUycl8oI6Qv+AN0X/gDhL/3s3
        T/82GR/lAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANBgoXXQ8e
        TcAUKnX/ECRr/w4RKu4XDAh3AAAABAAAAAAAAAADAAAAGwABADQAAgBEAAAAaiwYEM6HRTT/hzw2/4U7
        M/+FPjT/iEA5/1AsKv8EEiSyAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAwULLxUl
        R6EcNGz4HjqH/xkzhv8PH1n/Ryo0/1stHOkLBQNFAAEATAQaAIsIMgHXDVEB7g5XAvULSQH+FEQE/zA8
        EP9DLhf/bDUj/4pELP+NRiv/SjM6/wYfQ9MAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMF
        CT0XKEnaKEiI/ylKk/8lRZD/FSxw/yUeO/9/PSz/ajMi+gsbA9IMUAL0E3cC/xaLAv8XkgL/F5MC/xeT
        Av8XkgL/FIkB/xF4Af8WQQX/US4Z/4RBJ/8wKkL/AhEstAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAJEBw0sitMif8tUZb/K0+V/x03c/8RHUr/WS8t/4pCLf9GLRf/EGgH/xiUBP8YkgL/F5EC/xeR
        Av8XkQL/F5EC/xeRAv8XkQL/F5IC/xaMA/8WUwb/LBwU/xMZO+cACRs8AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAUAbMl7sL1SZ/y9Ul/8iPnn/Dh1K/0MrM/+LRS7/cDwk/x9fDP8XlAn/GJAD/xqM
        Av8ajQL/GJAC/xeQAv8XkQL/F5EC/xeRAv8XkQL/GJAE/xiLB/8NUAj/BRgMugAAAAsAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAECZRYrUf8mSon/HTx4/wwjWP8uHzT/fjow/4Y+MP84NhP+FYgI/xaA
        Av8ZcQD/HoIB/x6GAv8eiAL/G40C/xmQAv8ZjwL/F5AC/xeRAv8XkAP/F5ED/xqWDf8fcSHwCBMKbQAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqDCEy3B5EbP8eMVv/MyQ1/3I1NP+HPD3/YzEn/xRI
        Cf4PbjH+C2Zo/w5na/4RTC/+FjwP/xlKDf8ZXgf/F2kD/xp8Af8ajQH/GJEC/xeQA/8XkQP/GpkT/y6m
        Pf8eRSTeAAAAJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUCQqBYDMs/o1bR/+ZZU//mVRS/34+
        SP8oFhz/Cx0k/hKIr/0Ywvz/FLfx/wpBZP8QCSz/EQ4w/xEOLv8PDyf/Dh8Z/xJMC/8WfAP/F5EC/xeQ
        Bf8amBr/JbNL/yiEVPYDBwZHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACswIBjdcW1W/4WE
        aP9xU0X/MTIZ/w08C/8QTA//EGc3/xJ5W/8RcUr/D18V/xFiBf8RYgf/EVkM/g41E/8OHx//DhMj/w0d
        Gv8QUwv/F4oT/xJnJP8Xt33/EYRs9gIIB1YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAA
        AD8PFRJ9GSEdnQsYCbYQbgH9F5QB/xWRAP8ShAD/EoEA/xKBAP8VjQH/GJQC/xeUAv8XkwL/Fo0C/xWE
        Av8TcwT/EE4L/wwoEf8OUiD/DF06/QdHPdUDLCh0AAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAGBBwAjBJ2Af8TeQL/Lm4c/1NwO/9ifkP+SmQx/x1ED/8TawH/F40C/xeR
        A/8XkAP/GJED/xiSA/8YkgP/FYQC/xBiCP8GLhTYAAACKwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAABNgguBZwQZwHxFVoI/2FvTP/Dw6D/2tmv/9varP/R0aD/ra2A/2Zz
        Sf8YRgv/FXwB/xmPA/8YjwP/GJAE/xiQBf8VggP/EloD/wkkAskAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMIIQjZGXgQ/xV9BP9qe1L/3du3/+zrzP/r6s//6+rQ/+rp
        zv/m5sT/3966/5WUff8hRxP/GnsC/xuMBP8Zjgf/GY8G/xeQA/8TcgL/BycB2AAAADQAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADCy4Tih16Iv8YiQn/RW0y/tHRsP/e3cT/rq6g/+no
        3v/5+fD/+fnx//r68//z8+P/6unM/4qMcP8WOgj/H3wG/xyLCv8YkAT/F5AD/xeSA/8TeAj/BRsF1gAA
        AC8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACkZcTzjJbJK/xhtFf+go4v/8/Lc/8TD
        u/9CQkL/09PT//////////7////+//z79v/08+T/4ODD/09TQP8XUgT/H4cI/xeQA/8XkAL/F5AC/xmX
        Dv8RYxr/AgsFfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgYCNBF5WeoYpGv/I0ws/83K
        vP/8/PP/zs7N/3Nzc//r6+v//////////v////7///79//v69P/29eT/rKuW/xs7Dv8YYwP/GIwP/hmX
        Dv8YlAz/GqAk/xymR/8KOR/KAAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAh4dWgAY
        E6hSVU7q8PDl/////P/6+vr/8vLy/////////////////////v///v3//v36//r57//q6Nf/SVRC/wgi
        Iv4NRC/8Gpc6/h20S/8cwGz/Hsh9/xByS+oAAAAtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAIXd3cd708+3/8vLx//7+/v///////////+no6P/GxsX/6urp///+/P/+/Pj//fv0//37
        7v9/gIP/DiVz/w0te/8LOUj/EXZU/xKsiv8Uu5X/ClhD5QAAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAegYF82bGxrv9PT0//ycnJ///////r6+v/VVVU/wsLC/9EREP/29rW///+
        +P/+/PX////3/6Cgnv8PJGL/ET+i/xZguP8MNVL5AhgTrwU0K54BDgtZAAAABQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNubmvOl5eV/w0NDf9RUVH/9vb1/8TExP8oKCj/AAAA/wAA
        AP9ubWv//Pr1//789f////f/xMK8/xgnVv8ON5v/EEeR/wklN9YAAAAkAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkhISMSJiYn/FBQU/w4ODv/ExMP/yMjH/zY2
        Nv8AAAD/AAAA/ycnJ//j4dz///74/////f/Ewr7/FCcs/go1M/8LQRT/AxEBjQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjIyf4yMi/80NDT/AAAA/4WF
        hf/V1dT/Tk5N/wAAAP8AAAD/DQ0N/8HAvf////7//////7S0sv8UWAf/F4sB/xJkBP8CCAGJAAAAHAAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANDQ1Cbm5t9WVl
        Zf8AAAD/Y2Ji/9ra2f9wb27/CQkJ/wAAAP8EBAT/ra2s////////////mJyX/xJrA/8ZkAb/E08F/xY4
        BPAPJgPYAwoBXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABpCQkLGjo6O/ygoKP9bWlr/8vLw/52dnP9AQED/AAAA/wkJCf+5ubj///////b19f5TYlD+EngC/xqH
        Cf8YZgn/JX0L/ydvDf8NJwbBAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABUVFT5gYGDqjo6O/6Cgn/////7/2trZ/4+Pjv85OTn/RkZG/+Xk4///////v72+/RpD
        E/4aiwz/HYsO/x2LEv8gkyL/H3Me/wkcBqUAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABxgYGJiXl5b+9/f2/////f/+/vz/5+bl/8XFxP/c29r////+//X0
        9f9WW1T/EmAH/x+WH/8enDH/HKtQ/xmVTf8JLBLrAAAARgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFSEhIZGIiIf78PDu////////////////////
        ///08vL+j5WN/xpQFf8cmTD/HLdo/xm7gP8QkG//Bzcp0wABAFEAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERMTEnBZWVnKiIiH/LGw
        sP+2trX/k5OS/09cTP4bXCD/FoY6/xOcbPwNgmryCE1A4AIVEqAAAAAyAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8DAwN6CwsLpQwMDMQDBAOwAg4BugUeDdkEHhW9AyomcQAHB0wAAAAqAAAABwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///4H///+A//D/AP/AcAB/gAAAfwAAAH8AAAD+AAAA/gAAAP4AAAB/AA
        AAfwAAAH+AAAB/8AAB/8AAAf+AAAH/gAAA/wAAAP8AAAB/gAAAf8AAAH/AAAD/wAAD/8AAB//gAAP/4A
        AB/+AAAP/wAAH/+AAB//gAA//8AAf//wAf8=
</value>
  </data>
</root>